from sympy.combinatorics import Permutation


class SymmetricGroupGeneratorsConstructor(object):
    # Every Symmetric Group can be generated by two elements of order 2 and 3.
    # This class calculates those two elements for a given degree.
    #
    # I. M. S. Dey and J. Wiegold, "Generators for alternating and symmetric groups,"
    # J. Australian Math. Soc. 12 (1971), 63-68.

    def __init__(self, degree):
        self.degree = degree

    # Generates the permutation (1,2,3)(4,5,6)...(n-2,n-1,n)
    # i.e. the Permutation(0,1,2)(3,4,5)...(n-3,n-2,n-1) for python
    # for a given 'n' which is a multiple of 3
    def get_an(self, n):
        # Validate 'n'
        if n > self.degree:
            raise RuntimeError('Error in calculating An, n needs to be smaller than the degree.')
        if n <= 0 or n % 3 != 0:
            raise RuntimeError('Error in calculating An, n needs to be positive and a multiple of 3.')
        # Generate the permutation
        an = Permutation(self.degree-1)
        for i in range(0, n, 3):
            an = an*Permutation(i, i+1, i+2)
        return an

    # Generate the permutation (6,9)(7,10)(8,11)(12,15)(13,16)...(6k,6k+3)(6k+1,6k+4)(6k+2,6k+5)
    # i.e. the Permutation(5,8)(6,9)(7,10)(11,14)(12,15)...(6k-1,6k+2)(6k,6k+3)(6k+1,6k+4) in python
    # for a given 'k' which is greater or equal to 1
    def get_ck(self, k):
        # Validate 'k'
        if k > self.degree:
            raise RuntimeError('Error in calculating Ck, k needs to be smaller than the degree.')
        if k < 1:
            raise RuntimeError('Error in calculating Ck, k needs to be greater or equal to 1.')
        # Generate the permutation
        ck = Permutation(self.degree-1)
        for i in range(1, k+1):
            ck = ck*Permutation(6*i-1, 6*i+2)(6*i, 6*i+3)(6*i+1, 6*i+4)
        return ck

    def construct(self):
        n = self.degree
        # Get the a, b1 and b2 elements which will then be the components of the Symmetric Group generators
        if n < 19:
            # TODO: Add the different cases for n less than 19
            return 'To be developed'
        else:
            m = n // 6
            k = n % 6
            if k == 0:
                a = self.get_an(n-3)
                # b1 = (1,4)(2,n-2)(3,n-1)(n-6,n-3)(n-5,n)c_m-2
                b1 = Permutation(0, 3)(1, n-3)(2, n-2)(n-7, n-4)(n-6, n-1)*self.get_ck(m-2)
                # b2 = b1(n-11,n-8)
                b2 = b1*Permutation(n-12, n-9)
            elif k == 1:
                a = self.get_an(n-1)
                # b1 = (1,4)(2,n)(3,n-1)(n-6,n-3)(n-5,n-2)c_m-2
                b1 = Permutation(0, 3)(1, n-1)(2, n-2)(n-7, n-4)(n-6, n-3)*self.get_ck(m-2)
                # b2 = b1(n-12,n-9)
                b2 = b1*Permutation(n-13, n-10)
            elif k == 2:
                a = self.get_an(n-2)
                # b1 = (1,4)(2,n-1)(3,n)(n-8,n-5)(n-6,n-3)c_m-2
                b1 = Permutation(0, 3)(1, n-2)(2, n-1)(n-9, n-6)(n-7, n-4)*self.get_ck(m-2)
                # b2 = b1(n-7,n-4)
                b2 = b1*Permutation(n-8, n-5)
            elif k == 3:
                a = self.get_an(n-3)
                # b1 = (1,4)(2,n-2)(3,n-1)(n-3,n)c_m-1
                b1 = Permutation(0, 3)(1, n-3)(2, n-2)(n-4, n-1)*self.get_ck(m-1)
                # b2 = b1(n-8,n-5)
                b2 = b1*Permutation(n-9, n-6)
            elif k == 4:
                a = self.get_an(n-1)
                # b1 = (1,4)(2,n)(3,n-3)(n-10,n-7)(n-8,n-5)c_m-2
                b1 = Permutation(0, 3)(1, n-1)(2, n-4)(n-11, n-8)(n-9, n-6)*self.get_ck(m-2)
                # b2 = b1(n-9,n-6)
                b2 = b1*Permutation(n-10, n-7)
            else:  # k == 5
                a = self.get_an(n-2)
                # b1 = (1,4)(2,n-1)(3,n)(n-5,n-2)c_m-1
                b1 = Permutation(0, 3)(1, n-2)(2, n-1)(n-6, n-3)*self.get_ck(m-1)
                # b2 = b1(n-10,n-7)
                b2 = b1*Permutation(n-11, n-8)
            # Get the generators
            if m % 2 == 1:
                return a, b2
            else:  # m % 2 == 0
                return a, b1
