# DISCLAIMER: In the following text and code, the word "Group" will refer
# to the algebraic structure known as "group", as described in Group Theory,
# the relevant branch of Mathematics and Abstract Algebra.
#
# CONVENTION: Since this is an algorigthm and not an abstract generic Group,
# all Groups from now on will be finite order Groups.
#
# TODO: Add a document explaining the correlation between the set of
# all posible number squares and the Symmetric Group.

class Group:
    # This class contains basic operations that apply to all Groups



class SymetricGroup(Group):
    # The class contains the different elements and behaviors that
    # the Symetric Group has.

    # Based on the Theorem by G. A. Miller, a Symetric Group can be
    # generated by an element of order 2 and an element of order 3.
    #
    # TODO: Include the reference (Theorem 2.7)
    # http://www.math.uconn.edu/~kconrad/blurbs/grouptheory/genset.pdf
    def __init__(self, genOrder2, genOrder3):
        # The elements are arrays of the same length as the Symetric Group's
        # degree, therefore their lenghts should be the same as well
        if len(genOrder2) != len(genOrder3):
            raise RuntimeError('Generators do NOT have the same degree (array lentgh)!')
        self.genOrder2 = genOrder2
        self.genOrder3 = genOrder3

    # Get the Degree of the Group
    def getDegree(self):
        # Get the degree of the element from a generator
        return len(self.genOrder2)

    # Function for the "multiplication" operation of two elements
    # which is the composition of two permutations in the symetric group
    def composition(perm1, perm2):
        n = self.getDegree()
        result = [0 for i in range(n)]
        for i in range(n):
            result[i] = el1[el2[i]-1]
        return result

    # Function to check if a group element is the identity one
    # TODO: Refer to the array-element relation as to how is the identity element defined
    def isIdentity(perm):
        n = self.getDegree()
        if perm == [i+1 for i in range(n)]:
            return True
        else:
            return False

    # Function to get the Order of a group element
    # TODO: Refer to the definition of the order of a group element
    def getElementOrder(el):
        # Initialise the order counter
        order = 1
        # Set the Base Element
        baseEl = el
        # Multiply the element with itself until it becomes the Identity element
        while not(isI(el)):
            el = symElMerge(el, baseEl)
            order += 1
        return order
