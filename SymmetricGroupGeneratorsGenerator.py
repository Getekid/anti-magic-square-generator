class SymmetricGroupGeneratorsGenerator(object):
    # From Group Theory, every Symmetric Group can be generated by
    # two elements of order 2 and 3.
    # TODO: Add sources.
    #
    # This class calculates those two elements based on the given degree.

    def __init__(self, degree):
        self.degree = degree

    # Generates the permutation (1,2,3)(4,5,6)...(n-2,n-1,n)
    # for a given 'n' which is a multiple of 3
    def getAn(self, n):
        if n > self.degree:
            raise RuntimeError('Error in calculation, n needs to be smaller than the degree.')
        if n <= 0 or n%3 != 0:
            raise RuntimeError('Error in calculating An, n needs to be positive and a multiple of 3.')
        # Initialise the array of length n
        An = [i+1 for i in range(self.degree)]
        # Generate the permutation
        for i in range(1, n+1):
            An[i-1] = i+1 if i%3 != 0 else i-2
        return An

    # Generate the permutation (1,4)(2,5)(3,6)(7,11)(8,12)...(6k-3,6k)
    def getCk(self, k):
        if k > self.degree:
            raise RuntimeError('Error in calculation, k needs to be smaller than the degree.')
        if k < 1:
            raise RuntimeError('Error in calculating Ck, k needs to be greater or equal to 1.')
        # Initialise the array of length 6k
        Ck = [i+1 for i in range(self.degree)]
        # Generate the permutation
        #for i in range(1, 6*k+1):
            #Ck[i-1] = i+3 if i%6 > 0 and i%6 < 4 else i-3
        for i in range(6, 6*k+6):
            Ck[i-1] = i+3 if i%6 < 3 else i-3
        return Ck

# Function for the "multiplication" of two
# elements of the symetric group
def symElMerge(el1, el2):
    n = len(el1)
    result = [0 for i in range(n)]
    for i in range(n):
        result[i] = el1[el2[i]-1]
    return result

def getElOrder(el):
    n = 1
    baseEl = el
    while not(isI(el)):
        el = symElMerge(el, baseEl)
        n += 1
    return n

def isI(el):
    n = len(el)
    if el == [i+1 for i in range(n)]:
        return True
    else:
        return False

calc = SymmetricGroupGeneratorsGenerator(36)
a = calc.getAn(33)

# b1 = (1,4)(2,34)(3,35)(30,33)(31,36)C_{m-2}
b1 = [i+1 for i in range(36)]
b1[1-1] = 4
b1[4-1] = 1
b1[2-1] = 34
b1[34-1] = 2
b1[3-1] = 35
b1[35-1] = 3
b1[30-1] = 33
b1[33-1] = 30
b1[31-1] = 36
b1[36-1] = 31

# b2 = b1(25,28)
b2 = [i+1 for i in range(36)]
b2[25-1] = 28
b2[28-1] = 25

c = calc.getCk(4)

# b1 = [4, 22, 23, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 24, 20, 18, 2, 3, 19]
# b2 = [i+1 for i in range(24)]
# b2[13-1] = 16
# b2[16-1] = 13
#
# c = calc.getCk(2)

# ab1 = symElMerge(a, symElMerge(b1, c))
# fortyTwo = ab1
# for i in range(41):
#     fortyTwo = symElMerge(fortyTwo, ab1)
#
# ab2 = symElMerge(ab1, b2)
# seventyEight = ab2
# for i in range(77):
#     seventyEight = symElMerge(seventyEight, ab2)
#
# print(getElOrder(fortyTwo))
# print(getElOrder(seventyEight))

print(a)
print(symElMerge(b1, c))
